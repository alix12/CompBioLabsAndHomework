COMP BIO

What Unix is:
Kernal - resource manager, the core of the operating system. To open 'excel', you ask the kernal. (tries to stop your computer from crashing). We always have to go through the Kernal to do anything.
Unix is an operating system: a whole huge family of operating systems actually. It includes a kernal. Mac OS X is a 'species' of unix. so is Linux. (operating system is bigger than a kernal, bc file structure, etc).

Why do we care?
the terminal provides a way to explore your files, and use a large number of very powerful, scalable tools for managing and manipulating files.

Whats the terminal? Why haven't we been using it?
It's an application, a special kind. Provides an interpreter of your commands for using the computer. The interpreter is your shell (software that you are accessing). 

Look at your computer in different ways
Higer level of controls on permissions
Manage data
Create stand-alone programs
Communicate with other computers, work remotely
Demystify how your operating system works and take charge of your computer


General Syntax of Unix

Your data is in a file within a file (Branching file system)
Root directory: /
Sub-directories: Documents/
Sub-sub-directories: CompBio/

Most common tools:
A single tool does one thing well.
Pipelines of workflows are created by connecting these single operations together in ways that work for you.


The basic Syntax

$ [command_name] [options] [inputs]

inputs will be the files we are working with.
space is the seperater
options start with an option
THERE IS NO UNDO
-DELETING MEANS GONE FOREVER



How to check out things within a file
pwd

cd

ls

wc BirdList.txt
	Word Count, tells you how many lines

how to count just the ducks

grep duck BirdList.txt
	pulls out all the list items with the word duck (doesnt include everything)
grep  BirdList.txt

Redirection: >
[command Blah] > newfile

[command Blah] > newfile | wc
you can do it in one line!!
 BE CAREFUL WRITING FILE NAMES, WILL OVERRITE THINGS YOU MIGHT NOT WANT TO OVERRITE

Brute force way.
grep Goose >> DUCKS.txt
it just adds onto the bottom 

grep Swans >> DUCKS.txt (catch the header frowns)

also
grep [dD]uck BirdList.txt
lower or uppercasse duck


to invert grep (all but ducks)
grep -v Duck BirdList.txt >> NotADuck
looking at files
cat (all of them)
less (q is to quit, cntrl f or b for forwards and backwards, spacebar, and arrows)

USE MAN to look at how to use things - manuel
man grep
man less
on your own!!! TRY IT ALL



When deleting: dont use rm, just use the manual mouse way to delete.

ls *.txt will bring up any and all files that contain .txt
**********************************************************************************************************
Tuesday January 24, 2017
GIT
can be used as a command line tool. 
What's it doing?
You have to initialize git, and it creates a repository in the directory that you intialize git in.
	git creates a directory (it's kind of hidden from you. the directory has the name of .git - the . before git hides it, that's how it works).
		If you wanna see whats hidden you use ls -a
		every directory has . and .. as hidden directory

So right now we do not have a git repository. 
*************************
$ git init

git is the command in the shell, init is the command that goes to git
It initializes an empty git repository in the current directory, it starts with . and is hidden from normal view.
Just a new directory named .git, can cd into .git, it makes a bunch of different things.
RIGHT NOW: git is not 'controlling' anything right now. it doesnt do anything until you ask it to. The hidden directory is where all the information about different versions are stored.

When in directory containig the .git directory can use git status
git status : can tell you that there are files on here that you can be tracking but currently are not.		
$ git add "filename"
if you want everything in the directory, use:
git add *

git status will show you what is now in git

These files are now "staged"
it says, 'im ready to make this apart of my archives'
IT IS NOT SAVING EVERYTHING LIKE GOOGLE DOC
Now it's ready to commit

when would you add to commit?
-When you did something great and it's definitely working now.
-When you're about to do something risky, experimental, or spur of the moment
It is not necessary to commit everytime you save

$ git commit -m "my commit message"
	it makes you take a message, so there are notes to what you just commited to.
	just using that line w/o -m, git will open up a text editor, might be useful sometimes, but might be more convinient to just put it in your line of code.


$ git log  - will show you the log of your commits with the unique hashes

$ git pull (to clone from github)



**********************************************************************************************************




Thursday January 26, 2017

TRY SWCARPENTRY.github

$ git diff
	shows differences (its a safe thing to use). 
	the most recent commit of the working directory is identified as HEAD
	HEAD~1 is the commit before the HEAD (most recent commint)
	HEAD~2 is teh commit before HEAD~1
	(hashes don't change, head changes)
git diff - where I am now with all my files
dit diff "filename" where I am now with a specific file compared to my last commit
git diff HEAD 'filename' same as above
git diff HEAD~N - specific file with N commits ago of changes

$ git checkout "filename"
	!! This deletes ANY changes that have not yet been committed.
	THERE IS NO UNDO
git checkout HEAD~N
	use the version of a specific file from N commits ago
	The version from the most recent commit can still be accessed.

$ cat "filename" after checking out and stuff


TO UNDO A COMMIT
 - more dangerous than checking out
 git revert  PLZ read about before using



##############################******************************************##################################

TUESDAY???

WHAT IS GITHUB

Web interface where you can use version control. It is a website to use git
PUBLIC (unless you pay to be private)


WHEN YOU FORGET -M
VIM
press i to begin inserting text
type your commit message
press esc to leave insertion mode
type :x and then press enter to save the commit message and exit the vim


nano
atom
 why would you want to learn a mouse free editor taht requires you to memorize or look up commands?
 can run other jobs on other computers (ssh)
 REMOTE COMPUTING!!!






Getting git to ignore files

You can put things in a seperate directory that is not initialized with git

.gitignore
	It's just a file.
	It's plain text.

touch fileIwonttrack    (or gedit "")
open fileIwonttrack
ls -a
open .gitignore
	add fileIwonttrack
git status
	YAY not existing!!


Removing files that git has been tracking

rm filename 		NO UNDO!!!!

when using git, you can tell git you are removing a file that has been previously commited by doing
git rm filename

___ this current snapshot of your repository is gone, other versions are still there....

mkdir newdir
mv filename newdir/		# move it; note /
or
mv filename newname		# rename

when using git, just tell git you are moving it.

git mv filename newdir/		# move it; note /
or
git mv filename newname		# rename


what should and shouldn't go into a git repo

YES:
	plain text code you want to version control
	plain text code you want to version control
	plain text data that isn't too large




NO:
	Truely private stuff
	raw data you never plan to alter and don't want to push to github
	large data files > 50MB

MAYBE:
	Files with proprietary of 'rich' formats (docx, xlsx, etc)





WHAT IS PLAIN TEXT
	no stylized text
	carraige returns - ???
	file extentions - .txt, .asc

Looking at .docx in plain text, you cant!! you dont have an interpreter

plain text is as close as we can get to a universal language between

ASCII (askee)
7bits of information
128 characters
now:
UTF-8

which kinds of data are almomst always plain text
.txt
.csv
README

Source Code:
.R
.md (mark down)
.rmd

************* can have different line break systems:
mac has /n
windows need 
^M or \n\r
*************

Good file and directory names
	no special characters
	no spaces
	descriptive
	not crazy long
	files include extension





######################******************************************##########################################

THURSDAY FEBRUARY 2, 2017
DOS based systems (windows)
All these represent a carriage return
CR, \r, ^M

Unix
LF, \n, $

Some use both at the same time
CLRF, \r\n or ^M$

R knows how to read all of these.

$ file filename 	#Show file format

$ cat -e filname   	#Show file with line endings

$ head filename | cat -e  #For big files



THREE DIFFERENT OPTIONS FOR .CSV

file *.csv
test.csv		shows what type of file: ASCII text, with CR line 
test_msdos.csv 	shows what type of file: ASCII text, with CR line
test_win.csv 	ASCII text, with CRLF line terminators

HOW TO FIX???

cat file.csv | tr 'ctrl-v ctrl-m' '\n' > file_unix.csv

	type control v and control m, you get ^M (displays ^M)
	best way to convert windows to unix

SCRIPTING

What makes a good script

well annotated, edited, readable, defined variable names, directions, no typos, tells a story

-Can be executed from top to bottom in linear order
-have variable names that are easy to  understand
-have comments (in R and in the shell, comments start with #)
-Do not require unmentioned commands or steps; any requiremnets are noted in the comments

HOW DO YOU WRITE A SCRIPT??

play in the sandbox
-test things out one line at a time (when possible) in the console/terminal
-put the stuff that works into the script
-revise the script the same way you revise any piece of writing






TUESDAY 2/7/17	

git remote -


git push -u origin master

cant do a 'fast foreward' because it doesnt know how you want to integrate them
git pull
(will say conflict) when trying to pull, it created a new version of readme
looking at it: will show you the lines with conflicts


Then you manually change the first one. Update it

git will ay both are modified...
git add readme





clone vs pull
	clone is first time
	pull is when you want to update what you cloned, if it had changed




Things to remember:
What you see as one project becomes multiple repos if you clone it on multiple computers, or even if you clone it multiple times on one computer



DO NOT NEST GIT REPOSITORIES.
For each project you can create a repo without nesting, YES DO THAT

how to fix it: (might be more elegant with the git guey)
In top folder:
$ rm -rf .git

-r is a recursive remove (remove this folder and everything in it)
-f is with force - will not ask for any permissions. YIKES! 
SUPER DANGEROUS - be so sure that this is what you want

rm -rf /*
### SOOOOO BAAAAD (only talk about to mess with comp sci people) WATCH THE HORROR AND LOLOLOLS

WHEN IN R

X <- y ## R expects y is defined
			must have "y" for it to be read



R is a 1 indexed language

Python is 0 indexed

arrays are positioned/indexed by 1,2, ... n







NEW TOPIC!!!

FOR LOOP!!

Initial conditions/inputs
for a given number of times, 	### implies a counter variable

repeat some action or sequence of actions
Ending conditions/outputs

Computers are sooooo good at this. (humans are just alternatively creative)

1. a counter or index variable
2. A specification of the range of values for the counter;
a) the actions of the loop (part #3)

for ( i in seq(1,10) ) {  	#for the sequence 1:10
	print("hi")				#do this thing
}

THIS IS A FUNCTION: you give it an argument:
i is the counter, the range is after 'in'
The parenthesis and the word in are REQUIRED, so are the braces (if multiple actions, not if only one action)

Good practice with the indent

you can have multiple for loops (not nested)

could be doing millions of computations in ten lines of code

tot <- 0
for ( k in seq(1,15) ) {
	tot <- tot + k
	print (tot)
}

Note that vectors for looping do not have to  be numeric

for y in c("R", "S", "V", "P")) {
	print(y)
}
in r the range of valuesd should be a 1-dimentional vector or list; this is also true of loops in MATLAB and BASH

Combining for loops with array indexing is one of the keys to unlocking the mysteries of the 'big data' universe

Suppose you had a giant array of number and you wanted to do something to every number like make it negative and add five
you dont neet a loop!

But what if you only want to do that to only every other number

USE A FOR LOOP!!!


###############################********************************####################################


































































































